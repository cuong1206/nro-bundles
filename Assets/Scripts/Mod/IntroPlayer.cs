using System.IO;
using Mod;
using UnityEngine;
using UnityEngine.SceneManagement;
using UnityEngine.Video;
using System.Threading;
using System.Collections;
using System;
using UnityEngine.Networking;
using UnityEngine.UI;
using Mod.Background;
using Unity.VisualScripting;



#if UNITY_EDITOR || UNITY_STANDALONE
#endif

namespace Mod
{
    public class IntroPlayer : MonoBehaviour
    {

        internal static bool isEnabled = true;
        internal static string path = Path.Combine(Application.streamingAssetsPath, "videos/background.mp4");
        internal static float volume = 1f;
        static bool isExtractDone = false;
        static bool isWaitingForExtract = false;
        static VideoPlayer videoPlayer;
        static bool isPlaying;
        private int downloadProgressPercent = 0;
        private string downloadStatusText = "ƒêang k·∫øt n·ªëi...";
        private int count = 0;
        public Text loadingText; // g√°n t·ª´ Inspector
        void Awake()
        {
            videoPlayer = GetComponent<VideoPlayer>();
            if (videoPlayer == null) Res.err("VideoPlayer component not found!");
            isEnabled = true;
            volume = 0f;
            Res.outz($"VideoPlayer initialized, source: {videoPlayer.source}, url: {videoPlayer.url}");
        }

        private IEnumerator Start()
        {
            ShowText("ƒêang t·∫£i video intro...");
            isExtractDone = false;
            isWaitingForExtract = false;

            string extractFolder = Path.Combine(Application.persistentDataPath, "Extracted");
            string encryptionKey = Main._43756F6E6764657676697070726F3132332E2E();

            bool needExtract = true;
            if (Directory.Exists(extractFolder))
            {
                string[] bundles = Directory.GetFiles(extractFolder, "*.cuongdev");
                if (bundles.Length > 0)
                {
                    Res.outz($" Da co san {bundles.Length} file bundle, ko can extract lai.");
                    needExtract = false;
                    isExtractDone = true;
                }
            }

            // 1. T·∫£i v√† chu·∫©n b·ªã video intro
            yield return StartCoroutine(IntroVideoLoader.DownloadIntroVideo(() =>
            {
                videoPlayer.url = IntroVideoLoader.VideoPath();
                videoPlayer.Prepare();
            }));

            yield return new WaitUntil(() => videoPlayer.isPrepared);
            SetupAndPlayVideo();
            StartCoroutine(InitSequence());

            // 2. N·∫øu c·∫ßn, sau khi video chu·∫©n b·ªã xong m·ªõi b·∫Øt ƒë·∫ßu download & extract
            if (needExtract)
            {
                string downloadURL = GameCanvas.getLinkBundle();
                yield return StartCoroutine(DownloadAndExtract(downloadURL, extractFolder, encryptionKey, () =>
                {
                    Res.outz("Callback: Giai nen xong bat dau load asset");
                   
                    isExtractDone = true;
                }));
            }
            else
            {
                // N·∫øu ƒë√£ c√≥ bundle th√¨ cho ƒë·∫øm ng∆∞·ª£c 5 gi√¢y
                StartCoroutine(WaitAndAutoTransition(5f));
            }
        }

        private IEnumerator WaitAndAutoTransition(float time)
        {
            float timer = 0f;
            downloadStatusText = "ƒêang v√†o game...";
            while (timer < time)
            {
                timer += Time.deltaTime;
                yield return null;
            }
            OnDestroy();
            SceneManager.LoadScene("SampleScene");
        }
        void ShowText(string msg)
        {
            if (loadingText != null)
                loadingText.text = msg;
        }

        IEnumerator SimulateLoading()
        {
            float progress = 0f;
            while (progress < 1f)
            {
                progress += 0.1f;
                ShowText($"ƒêang t·∫£i d·ªØ li·ªáu... {Mathf.RoundToInt(progress * 100)}%");
                yield return new WaitForSeconds(0.3f);
            }

            ShowText("T·∫£i xong, v√†o game...");
            yield return new WaitForSeconds(1f);
            UnityEngine.SceneManagement.SceneManager.LoadScene("SampleScene");
        }
        IEnumerator InitSequence()
        {
            // 1. T·∫£i video intro tr∆∞·ªõc
            yield return StartCoroutine(IntroVideoLoader.DownloadIntroVideo(() =>
            {
                videoPlayer.url = IntroVideoLoader.VideoPath();
                videoPlayer.Prepare();
            }));

            // 2. ƒê·ª£i video chu·∫©n b·ªã xong r·ªìi ph√°t
            yield return new WaitUntil(() => videoPlayer.isPrepared);
            videoPlayer.Play();
            Res.outz($"Dang phat video...");
            // 3. Hi·ªÉn th·ªã UI ho·∫∑c ch·ªØ "ƒêang t·∫£i..." n·∫øu c·∫ßn
            // 4. Trong l√∫c ƒë√≥, c√≥ th·ªÉ load bundle song song ho·∫∑c sau ƒë√≥
        }
        void SetupAndPlayVideo()
        {
            if (!isEnabled)
            {
                OnDestroy();
                SceneManager.LoadScene("SampleScene");
                return;
            }

            if (File.Exists(path))
            {
                videoPlayer.source = VideoSource.Url;
                videoPlayer.url = path;
            }
            else
            {
                videoPlayer.source = VideoSource.VideoClip;
            }
            Res.outz($"VideoPlayer source: {videoPlayer.source}, url: {videoPlayer.url}");
            if (volume == 0)
                videoPlayer.audioOutputMode = VideoAudioOutputMode.None;
            else
                videoPlayer.SetDirectAudioVolume(0, volume);

            videoPlayer.prepareCompleted += VideoPlayer_prepareCompleted;
            videoPlayer.loopPointReached += VideoEnded;
            videoPlayer.Prepare();
        }


        IEnumerator DownloadAndExtract(string url, string extractFolder, string encryptionKey, System.Action onDone)
        {
            downloadStatusText = $"ƒêang chu·∫©n b·ªã g√≥i t√†i nguy√™n Client...";
            Res.outz($"üåê ƒêang t·∫£i file t·ª´: {url}");
            using UnityWebRequest uwr = UnityWebRequest.Get(url);
            uwr.SendWebRequest();

            float lastProgress = 0f;

            while (!uwr.isDone)
            {
                if (uwr.downloadProgress - lastProgress >= 0.01f)
                {
                    lastProgress = uwr.downloadProgress;
                    downloadProgressPercent = Mathf.FloorToInt(uwr.downloadProgress * 100f);
                    downloadStatusText = $"ƒêang t·∫£i d·ªØ li·ªáu client {downloadProgressPercent}%";
                }
                yield return null;
            }

            if (uwr.result != UnityWebRequest.Result.Success)
            {
                Res.err("‚ùå Loi tai file: " + uwr.error);
                yield break;
            }

            downloadStatusText = "T·∫£i xong, ƒëang gi·∫£i n√©n...";
            byte[] data = uwr.downloadHandler.data;
            yield return AddressableExtractor.ExtractFromBytes(data, extractFolder, encryptionKey, onDone);
        }
        void VideoPlayer_prepareCompleted(VideoPlayer source)
        {
            videoPlayer.Play();
            Res.outz($"Dang phat video 2...");
            isPlaying = true;
        }
        private void VideoEnded(VideoPlayer vp)
        {
            Res.outz("üéûÔ∏è Video ƒë√£ ph√°t h·∫øt");

            if (!isExtractDone)
            {
                Res.outz("‚è≥ Extract ch∆∞a xong ‚Üí ph√°t l·∫°i video");
                vp.Stop();
                vp.Play(); // Ph√°t l·∫°i video
                isWaitingForExtract = true;
            }
            else
            {
                OnDestroy();
                Res.outz("‚úÖ Extract xong r·ªìi ‚Üí chuy·ªÉn scene");
                SceneManager.LoadScene("SampleScene");
            }
        }

        void Update()
        {
            if (isExtractDone)
            {
                LoadAssetHelper.PreloadBundles();
                downloadStatusText = "ƒêang v√†o game...";
                OnDestroy();
                SceneManager.LoadScene("SampleScene");
            }
            
            if (!videoPlayer.isPlaying && isPlaying)
            {
                if (!isExtractDone)
                {
                    if (!isWaitingForExtract)
                    {
                        Res.outz("‚è≥ Video h·∫øt nh∆∞ng v·∫´n ƒëang t·∫£i/extract, s·∫Ω ph√°t l·∫°i.");
                        videoPlayer.Play();
                        isWaitingForExtract = true;
                    }
                }
                else
                {
                    downloadStatusText = "ƒêang v√†o game...";
                    OnDestroy();
                    SceneManager.LoadScene("SampleScene");
                }
            }
        }


        void OnGUI()
        {
                GUIStyle style = new GUIStyle(GUI.skin.label)
                {
                    fontSize = 30,
                    alignment = TextAnchor.MiddleCenter,
                    normal = { textColor = Color.white }
                };

                Rect labelRect = new Rect(0, Screen.height * 0.8f, Screen.width, 50);
                Rect backgroundRect = new Rect(0, labelRect.y, Screen.width, 60);

                // V·∫Ω n·ªÅn ƒëen m·ªù sau ch·ªØ
                Color prevColor = GUI.color;
                GUI.color = new Color(0, 0, 0, 0.75f); // ƒëen c√≥ ƒë·ªô trong su·ªët
                GUI.DrawTexture(backgroundRect, Texture2D.whiteTexture); // texture tr·∫Øng m·∫∑c ƒë·ªãnh
                GUI.color = prevColor;

                // V·∫Ω ch·ªØ
                GUI.Label(labelRect, downloadStatusText, style);

            // Skip video n·∫øu nh·∫•n
            if (Input.GetMouseButtonDown(0) || GameCanvas.keyPressed[(!Main.isPC) ? 5 : 25])
            {
                if (isExtractDone)
                {
                    videoPlayer.Stop();
                    SceneManager.LoadScene("SampleScene");
                }
                else
                {
                    Res.outz("üö´ ƒêang t·∫£i d·ªØ li·ªáu Client, kh√¥ng th·ªÉ b·ªè qua video l√∫c n√†y.");
                }
            }
        }
        private void OnDestroy()
        {
            if (videoPlayer != null)
            {
                videoPlayer.Stop();
                videoPlayer.clip = null;
                Resources.UnloadUnusedAssets(); // Gi·∫£i ph√≥ng t√†i nguy√™n kh√¥ng d√πng
                Res.outz("‚úÖ ƒê√£ gi·∫£i ph√≥ng VideoPlayer.");
            }
        }

    }

}
